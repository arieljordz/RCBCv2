@model RCBC.Models.UserModel
@{
    ViewData["Title"] = "User Maintenance";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper" style="padding-top: 60px;">

    <div class="pl-3 pr-3 pt-3">
        <label>Last Login: @ViewBag.DateNow.ToString("MMMM dd, yyyy HH:mm:ss")</label>
    </div>

    <div class="ln_solid"></div>
    <!-- Content Header (Page header) -->
    <div class="content-header pt-0 pb-0">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                </div><!-- /.col -->
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="">View All User</a></li>
                        <li class="breadcrumb-item active">Maintenance</li>
                    </ol>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">


            <div class="d-flex justify-content-center">

                <div class="col-md-12">
                    <div class="card card-light-blue">
                        <div class="card-header">
                            <h3 class="card-title"><i class="fa fa-users pr-2"></i>View All User</h3>
                        </div>

                        <div class="card-body">
                            <div class="row pb-3 pt-3">
                                <div class="col-md-12">
                                    <div class="dataTables_wrapper table-responsive dt-bootstrap4">
                                        <table id="tbl_users" class="table table-bordered table-hover text-center" style="width:100%"></table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card-footer">
                        </div>
                    </div>
                </div>

            </div>
        </div><!--/. container-fluid -->
    </section>

    <!-- Modal -->
    <div id="modal_user" class="modal fade" role="dialog" data-backdrop="static">
        <div class="modal-dialog modal-lg pt-5">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header bg-light-blue">
                    <h4 class="modal-title" id="modal_name"><i class="fa fa-user pr-2"></i>Update User</h4>
                    <button type="button" class="close" data-dismiss="modal">×</button>
                </div>

                <form id="frmUsers" novalidate="novalidate">

                    <div class="modal-body">
                        @Html.HiddenFor(x => x.Id)
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForModel("Username", new { @class = "label-control" })
                                    @Html.TextBoxFor(x => x.Username, new { @class = "form-control", placeholder = "Username", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(x => x.Username)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForModel("Employee Name", new { @class = "label-control" })
                                    @Html.TextBoxFor(x => x.EmployeeName, new { @class = "form-control", placeholder = "Employee Name" })
                                    @Html.ValidationMessageFor(x => x.EmployeeName)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForModel("Email", new { @class = "label-control" })
                                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type = "email", placeholder = "Email" })
                                    @Html.ValidationMessageFor(x => x.Email)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelForModel("MobileNumber", new { @class = "label-control" })
                                    @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control mask-mobile", placeholder = "Mobile Number" })
                                    @Html.ValidationMessageFor(x => x.MobileNumber)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelForModel("Group/Department", new { @class = "label-control" })
                                    @Html.DropDownList("GroupDept", ViewBag.cmbDepartments as SelectList, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.GroupDept)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelForModel("User Role", new { @class = "label-control" })
                                    @Html.DropDownList("UserRole", ViewBag.cmbUserRoles as SelectList, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.UserRole)
                                </div>
                            </div>
                            <div class="col-md-3 pt-4">
                                <div class="form-group clearfix pt-3">
                                    <div class="icheck-primary d-inline">
                                        @Html.CheckBoxFor(x => x.Active, new { @id = "Active" })
                                        @Html.Label("Active", "Active Status")
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row pb-3 pt-3">
                            <div class="col-md-12">
                                <div class="dataTables_wrapper table-responsive dt-bootstrap4">
                                    <table id="tbl_modules" class="table table-sm table-bordered table-hover" style="width:100%"></table>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary float-right">Save</button>
                        <button type="button" class="btn btn-danger ml-3 float-right" id="btnCancel">Cancel</button>
                    </div>
                </form>
            </div>

        </div>
    </div>

</div>
<!-- /.content-wrapper -->
@section Scripts
{
    <script>
        $(document).ready(function () {

            var isApproved = null;
            var checkedCheckboxIds = [];
            var selectedChildModuleIds = [];

            ValidateForm();
            function ValidateForm() {
                $.validator.setDefaults({
                    submitHandler: function () {
                        Register();
                    }
                });
                $('#frmUsers').validate({
                    rules: {
                        Username: {
                            required: true
                        },
                        EmployeeName: {
                            required: true
                        },
                        Email: {
                            required: true
                        },
                        MobileNumber: {
                            required: true
                        },
                    },
                    messages: {
                        Username: {
                            required: "This field is required"
                        },
                        EmployeeName: {
                            required: "This field is required"
                        },
                        Email: {
                            required: "This field is required"
                        },
                        MobileNumber: {
                            required: "This field is required"
                        },
                    },
                    errorElement: 'span',
                    errorPlacement: function (error, element) {
                        error.addClass('invalid-feedback');
                        element.closest('.form-group').append(error);
                    },
                    highlight: function (element, errorClass, validClass) {
                        $(element).addClass('is-invalid');
                        console.log(element);
                    },
                    unhighlight: function (element, errorClass, validClass) {
                        $(element).removeClass('is-invalid');
                        console.log(element);
                    }
                });
            }

            function Register() {
                $('#loading-image').show();

                var checkedCheckboxes = $('#tbl_modules input[type="checkbox"]:checked');
                var checkedCheckboxIds = [];
                var selectedChildModuleIds = [];


                checkedCheckboxes.each(function () {
                    if ($(this).attr('id') !== 'checkAllHeader') {
                        var checkboxId = $(this).attr('id');
                        checkedCheckboxIds.push(checkboxId);

                        var childModuleId = $(this).val();
                        selectedChildModuleIds.push(childModuleId);
                    }
                });

                console.log('IDs of checked checkboxes:', checkedCheckboxIds);
                console.log('ChildModuleIDs of selected rows:', selectedChildModuleIds);

                var formData = new FormData($("#frmUsers")[0]);

                formData.append("ModuleIds", checkedCheckboxIds.join(','));
                formData.append("ChildModuleIds", selectedChildModuleIds.join(','));

                console.log(formData);


                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Register", "Maintenance")',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success == true) {
                            Swal.fire('Success!', response.message, 'success');
                            $("#frmUsers").trigger("reset");
                            $("#modal_user").modal("hide");
                            LoadUsers();
                        }
                        else {
                            Swal.fire('Warning!', response.message, 'warning');
                        }
                        $('#loading-image').hide();
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            }

            $('#btnCancel').click(function () {
                $("#frmUsers").trigger("reset");
                $("#modal_user").modal("hide");
            })

            LoadUsers();
            function LoadUsers() {
                $('#tbl_users').DataTable({
                    destroy: true,
                    responsive: true,
                    processing: false,
                    search: true,
                    stateSave: true,
                    info: true,
                    searching: true,
                    paging: true,
                    order: [[1, "asc"], [2, "asc"]],
                    lengthMenu: [[5, 10, 20, -1], [5, 10, 20, "All"]],
                    ajax: {
                        "url": "../Maintenance/LoadUsers",
                        "type": "GET",
                        "datatype": "JSON",
                    },
                    columns:
                        [
                            { "data": "username", title: "Username", sClass: "dt-body-center", orderable: false },
                            { "data": "employeeName", title: "FullName", sClass: "dt-body-center", orderable: false },
                            { "data": "email", title: "Email", sClass: "dt-body-center", orderable: false },
                            { "data": "mobileNumber", title: "Mobile Number", sClass: "dt-body-center", orderable: false },
                            { "data": "groupDept", title: "Group Department", sClass: "dt-body-center", orderable: false },
                            { "data": "userRole", title: "User Role", sClass: "dt-body-left", orderable: false },
                            {
                                "data": "active", title: "Status", sClass: "text-center", render: function (data, type, row) {
                                    if (data == true) {
                                        return '<span class="badge bg-success">Active</span>'
                                    }
                                    else {
                                        return '<span class="badge bg-danger">Inactive</span>'
                                    }
                                }
                            },
                            {
                                "data": "isApproved", title: "Is Approved", sClass: "text-center", render: function (data, type, row) {
                                    isApproved = data;
                                    if (data == true) {
                                        return '<span class="badge bg-success">Approved</span>'
                                    }
                                    else if (data == false) {
                                        return '<span class="badge bg-secondary">Rejected</span>'
                                    }
                                    else {
                                        return '<span class="badge bg-danger">For Approval</span>'
                                    }
                                }
                            },
                            {
                                "data": "id", title: "Action", render: function (data) {
                                    if (isApproved == true) {
                                        return "<div class='row justify-content-center'>" +
                                            "<div class='dropdown dropleft'>" +
                                            "<button id='btnbars' type='button' class='btn btn-sm btn-primary btnbars' data-toggle='dropdown'>" +
                                            "<i class='fa fa-bars'></i>" +
                                            "</button> <div class='dropdown-menu'>" +
                                            "<div class='container fluid'> " +
                                            "<a id='btnUpdate' class='btn btn-warning btn-sm fa fa-edit col-sm-12' style='margin-bottom: 3px; margin-top: 3px;'>" +
                                            "&nbspUpdate</a>" +
                                            "<br />" +
                                            "<a id='btnDelete' class='btn btn-danger btn-sm fa fa-trash col-sm-12' style='margin-bottom: 3px; margin-top: 3px; color: white;'>" +
                                            "&nbspDelete</a>" +
                                            "</div></div></div ></div>";
                                    }
                                    else {
                                        return "<div class='row justify-content-center'>" +
                                            "<button id='btnPending' type='button' class='btn btn-sm btn-primary pending'>" +
                                            "<i class='fa fa-bars'></i>" +
                                            "</button>" +
                                            "</div>";
                                    }

                                }
                            }
                        ]
                });

                $('#tbl_users tbody').off().on('click', 'tr', function (e) {
                    e.preventDefault();
                    if ($(e.target).is("[id^=btnUpdate],[id^=btnUpdate] i")) {
                        UpdateUser();
                    }
                    else if ($(e.target).is("[id^=btnDelete],[id^=btnDelete] i")) {
                        RemoveUser();
                    }
                    else if (!$(e.target).is("[id^=btnbars],[id^=btnbars] i")) {
                        if (!$(this).hasClass("dtactive")) {
                            $(this).parent().find("tr").removeClass("dtactive");
                            $(this).addClass("dtactive");
                            Id = SelectedValue("tbl_users", "id");
                            $("[name='Id']").val(Id);
                        } else {
                            $(this).removeClass("dtactive");
                            $("[name='Id']").val(0);
                            $("#frmUsers").trigger("reset");
                        }
                    }
                });
            }

            $(document).on('click', '.pending', function () {
                Swal.fire('Information!', 'Update/Delete is not allowed, previous updates are still pending for approval.', 'info');
            });

            function UpdateUser() {
                if ($("[name='Id']").val() != 0) {
                    $.ajax({
                        url: "../Maintenance/UpdateUser?Id= " + $("[name='Id']").val(),
                        type: "GET",
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (res) {
                            if (res.data != null) {
                                $("#modal_user").modal("show");
                                $("[name='Username']").val(res.data.username);
                                $("[name='EmployeeName']").val(res.data.employeeName);
                                $("[name='Email']").val(res.data.email);
                                $("[name='MobileNumber']").val(res.data.mobileNumber);
                                $("[name='GroupDept']").val(res.data.groupDept);
                                $("[name='UserRole']").val(res.data.userRole);
                                $("[name='Active']").prop('checked', res.data.active);
                                LoadUserAccessById(res.data.id);
                            }
                        }
                    });
                }
                else {
                    Swal.fire('Information!', 'Please select a record first.', 'info');
                }
            }

            function RemoveUser() {
                if ($("[name='Id']").val() != 0) {
                    Swal.fire({
                        text: "Are you sure you want to delete this record?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#28a745',
                        cancelButtonColor: '#dc3545',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: '../Maintenance/RemoveUser?&Id=' + $("[name='Id']").val(),
                                type: 'POST',
                                success: function (res) {
                                    if (res.success == true) {
                                        Swal.fire('Success!', 'Record has been deleted.', 'success');
                                        LoadUsers();
                                        $("[name='Id']").val(0);
                                    } else {
                                        Swal.fire('Error!', res.msg, 'error');
                                    }
                                }
                            });
                        }
                    });
                }
                else {
                    Swal.fire('Information!', 'Please select a record first.', 'info');
                }
            }

            LoadUserAccessById(0);
            function LoadUserAccessById(UserId) {
                var tbl_modules = $('#tbl_modules').DataTable({
                    destroy: true,
                    responsive: true,
                    processing: false,
                    search: false,
                    stateSave: true,
                    info: false,
                    searching: false,
                    paging: false,
                    ajax: {
                        "url": "../Maintenance/LoadUserAccessById",
                        "type": "GET",
                        "data": { UserId: UserId },
                        "datatype": "JSON",
                    },
                    columns:
                        [
                            {
                                data: null,
                                title: '<div class="icheck-primary d-inline"><input type="checkbox" id="checkAllHeader"><label for="checkAllHeader"></label></div>',
                                orderable: false,
                                sClass: "text-center",
                                render: function (data, type, row) {
                                    var subModuleId = row.subModuleId;
                                    var checked = row.isActive == null ? '' : 'checked="checked"';
                                    if (row.childModuleId !== 0) {
                                        return '<div class="icheck-primary d-inline"><input type="checkbox" id="' + subModuleId + '" ' + checked + ' value="' + row.childModuleId + '"><label for="' + subModuleId + '"></label></div>';
                                    }
                                    return '<div class="icheck-primary d-inline"><input type="checkbox" id="' + subModuleId + '" ' + checked + ' value="' + row.childModuleId + '"><label for="' + subModuleId + '"></label></div>';
                                }
                            },
                            { "data": "subModuleId", visible: false, "orderable": false },
                            { "data": "childModuleId", visible: false, "orderable": false },
                            { "data": "module", title: "Module", sClass: "text-left", orderable: false },
                            { "data": "subModule", title: "Sub Module", sClass: "text-left", orderable: false },
                            { "data": "childModule", title: "Child Module", sClass: "text-left", orderable: false },
                            { "data": "isActive", title: "Is Approved", sClass: "text-center", orderable: false },
                        ],
                    initComplete: function () {
                        var allCheckboxesChecked = tbl_modules.rows().nodes().to$().find('input[type="checkbox"]:checked').length === tbl_modules.rows().count();
                        $('#checkAllHeader').prop('checked', allCheckboxesChecked);
                    }
                });

                $('#tbl_modules tbody').off().on('click', 'tr', function (e) {
                    var row = tbl_modules.row(this);
                    var checkbox = row.nodes().to$().find('input[type="checkbox"]');
                    var checkboxId = checkbox.attr('id');

                    checkbox.prop('checked', !checkbox.prop('checked'));

                    if (!$(this).hasClass("dtactives")) {
                        $(this).parent().find("tr").removeClass("dtactives");
                        $(this).addClass("dtactives");
                    } else {
                        $(this).removeClass("dtactives");
                    }

                    var allCheckboxesChecked = tbl_modules.rows().nodes().to$().find('input[type="checkbox"]:checked').length === tbl_modules.rows().count();
                    $('#checkAllHeader').prop('checked', allCheckboxesChecked);
                });

                $('#tbl_modules').on('click', '#checkAllHeader', function () {
                    var isChecked = $(this).prop('checked');
                    tbl_modules.rows().nodes().to$().find('input[type="checkbox"]').prop('checked', isChecked);

                    if (isChecked) {
                        $('#tbl_modules tbody tr').addClass("dtactives");
                    } else {
                        $('#tbl_modules tbody tr').removeClass("dtactives");
                    }
                });

            }


        });

        ActiveMenu("#maintenance");
        ActiveMenu("#view_users");

    </script>
}

